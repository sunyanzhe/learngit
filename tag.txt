标签管理
    发布一个版本时,我们通常现在版本库带一个标签(tag),这样,就唯一确定了打标签时刻的版本.
    将来无论什么时候,取某个标签的版本,就是把那个打标签的时刻的历史版本取出来.所以,标签也是版本库的快照

    Git的标签虽然是版本库的快照,但其实他就是指向某个commit的指针(跟分支很像,但是分支可以移动,标签不能移动),所以,创建和删除标签都是瞬间完成的.
    Git有commit,为什么还要引入tag?
    因为commit号是一串很乱的数字
    而tag就是一个人容易记住的有意义的名字,它跟某个commit绑在一起

创建标签
    在Git中打标签非常简单,首先,切换到需要打标签的分支上:
    $ git checkout master

    然后,输入命令 git tag [name]就可以打一个新标签
    $ git tag v1.0

    可以用命令git tag查看所有标签:
    $ git tag
    v1.0

    默认标签是打在最新提交的commit上的.有时候,如果忘了打标签,比如,现在已经是周五了,但是周一打的标签没有打,怎么办
    方法就是找到历史提交的commit id,然后打上就可以了
    $ git log -prretty=oneline --abbrev-commit
    12a631b (HEAD -> master, tag: v1.0, origin/master) merged bug fix 101
    4c805e2 fix bug 101
    e1e9c68 merge with no-ff
    f52c633 add merge
    cf810e4 conflict fixed
    5dc6824 & simple
    14096d0 AND simple
    b17d20e branch test
    d46f35e remove test.txt
    b84166e add test.txt
    519219b git tracks changes
    e43a48b understand how stage works
    1094adb append GPL
    e475afc add distributed
    eaadf4e wrote a readme file

    比方说要对add merge这次提交打标签,它对应的commit id是f53c633,输入命令:
    $ git tag v0.9 f52c633

    再用命令git tag查看标签:
    $ git tag
    v0.9    
    v1.0

    注意,标签不是按时间顺序列出,而是按字母排序的.可以用git show [tagname]查看标签信息:
    $ git show v0.9
    commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)
    Author: Michael Liao <askxuefeng@gmail.com>
    Date:   Fri May 18 21:56:54 2018 +0800

        add merge

    diff --git a/readme.txt b/readme.txt

    可以看到,v0.9确实打在add merge这次提交上.
    还可以创建带有说明的标签,用-a指定标签名,-m指定说明文字
    $ git tag -a v0.1 -m 'Version 0.1 relesed' 1094adb
    
    用命令git show [tagname]可以看到说明文字
    $ git show v0.1
    tag v0.1
    Tagger: Michael Liao <askxuefeng@gmail.com>
    Date:   Fri May 18 22:48:43 2018 +0800

    version 0.1 released

    commit 1094adb7b9b3807259d8cb349e7df1d4d6477073 (tag: v0.1)
    Author: Michael Liao <askxuefeng@gmail.com>
    Date:   Fri May 18 21:06:15 2018 +0800

        append GPL

    diff --git a/readme.txt b/readme.txt

    注意:标签总是和某个commit挂钩.如果这个commit既出现在master分支,又出现在dev分支,那么在这两个分支都可以看到这个标签

    小结
        1.命令git tag [tagname]用于新建一个标签,默认为HEAD,也可以指定一个commit id;
        2.命令git tag -a [tagname] -m 'blablablabla..'可以指定标签信息;
        3.命令git tag可以查看所有标签

操作标签
    如果标签打错了,也可以删除:
    $ git tag -d v0.1
    Delete tag 'v0.1' (was f15b0dd)

    因为创建的标签只存储在本地,不会自动推送到远程.所以,打错的标签可以在本地安全删除
    如果要推送某个标签到远程,使用命令 git push origin [tagname]
    $ git push origin v1.0
    Total 0 (delta 0), reused 0 (delta 0)
    To github.com:michaelliao/learngit.git
    * [new tag]         v1.0 -> v1.0

    或者,一次性推送全部尚未推到远程的本地标签:
    $ git push origin --tags
    Total 0 (delta 0), reused 0 (delta 0)
    To github.com:michaelliao/learngit.git
    * [new tag]         v0.9 -> v0.9

    如果标签已经推送到远程,要删除远程标签就麻烦一点,先从本地删除:
    $ git tag -d v0.9
    Deleted tag '0.9' (was f52c633)

    然后,从远程删除.删除命令也是push,但是格式如下
    $ git push origin :refs/tags/v0.9
    To github.com:michaelliao/learngit.git
    - [deleted]         v0.9

    要看看是否真的从远程库删除了标签,可以登陆GitHub查看

    小结
        命令$ git push origin [tagname]可以推送一个本地标签;
        命令$ git push origin --tags可以推送全部未推送过的本地标签
        命令$ git tag -d [tagname]可以删除一个本地标签
        命令$ git push origin :refs/tags/[tagname]可以删除一个远程标签

使用GitHub  
    GitHub作为免费的远程仓库,如果是个人的开源项目,放到GitHub上是完全没有问题的.其实GitHub还是一个开源协作社区,通过GitHub,既可以让别人参与你的开源项目,也可以参与别人的开源项目.
    在GitHub出现之前,开源项目开源容易,但让广大人民群众参与进来比较困难,因为要参与,就要提交代码,而给每个想提交代码的群众都开一个账号是不现实的,因此,群众也仅限于报个bug,即使能改掉bug,也只能把diff文件用邮件发过去,很不方便

    但是在GitHub上,利用Git机器强大的克隆和分支功能,广大人民群众真正第一次自由参与各项开源项目了
    如何参与一个开源项目呢?比如人气极高的boostrap项目,这是一个非常强大的CSS框架,你可以访问它的项目主页https://github.com/twbs/bootstrap,点'Fork'就在自己的账号下克隆了一个boostrap仓库,然后,从自己的账号下clone:
    $ git clone git @github.com:michaelliao/boostrap.git

    一定要从自己的账号下clone仓库,这样你才能推送修改.如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git可控,因为没有权限,你将不能推送修改

    -----GitHub-----------------------------------------
    |    ----------------       ----------------       |
    |    |twbs/bootstrap| ----> | my/bootstrap |       |
    |    ----------------       ----------------       | 
    |                                    ^             |
    -------------------------------------|--------------
                                         |
                                -------------------       
                                | local/bootstrap |       
                                -------------------

    如果你想修复bootstrap的一个bug,或者新增一个功能,立刻就可以开始干活,干完后,往自己的仓库推送.
    如果你希望bootstrap的官方库能接受你的修改,你就可以在GitHub上发起一个pull request.当然,对方是否接受你的pull request就不一定了
    
    小结
        1.在GitHub上,可以任意Fork开源仓库
        2.自己拥有Fork后的仓库的读写权限
        3.可以推送pull request给官方仓库来贡献代码

本地库与远程库关联  
    使用git remote add origin git@XXX.com.XXX/xxx.git
    之后,就可以正常地用git push和git pull推送了
    如果在使用命令 git remote add时报错:
    fatal:remote origin already exists.

    这说明本地库已经关联了一个名叫origin的远程库,此时,可以先用git remote -v查看远程库信息:
    git remote -v
    origin    git@github.com:sunyanzhe/learngit.git (fetch)
    origin    git@github.com:sunyanzhe/learngit.git (push)

    可以看到,本地库已经关联了origin的远程库,并且,该远程库指向GitHub
    我们可以删除已有的GitHub远程库:
    $ git remote rm origin

    在关联码云的远程库(注意路径中需要填写正确的用户名):
    git remote add gitee git@gitee.com:sunyz/learngit.git