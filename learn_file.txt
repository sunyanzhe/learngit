创建一个版本库非常简单

$ mkdir [filename]
$ cd [filename]
$ pwd
$ git init
$ ls -ah (查看目录)

将文档添加到Git仓库,**文档必须在版本库下面

$ git add [filename]
$ git commit -m [message]

已经成功添加并提交了一个readme.txt文件,如果继续修改文件
运行 $ git status

会输出告诉我们,readme.txt被修改过了,但还没有准备提交的修改
虽然Git告诉我们readme.txt被修改了,但如果能看看具体修改了什么内容,自然是很好的
查看具体修改了什么内容 可以使用 $ git diff [filename] 这个命令查看

可以使用 $ git log命令查看历史记录
如果嫌输入信息太多,看的眼花缭乱,可以试试加上--pretty=oneline参数:

$ git log --pretty=oneline

开始的一大串类似1094adb...的是commit id(版本号),这个版本号是一个SHA1计算出来的一个非常大的数字,用十六进制表示,而且每个人的commit id都不相同.
每提交一个新版本,实际上Git就会把他们自动串成一条时间线.

如果想将文档回退到上一个版本,需要以下几步
1.首先,Git必须知道当前是哪个版本,在Git中,用HEAD表示当前版本,上一个就是HEAD^,上上个版本就是HEAD^^,也可以写成HEAD~100
2.使用 $ git reset

$ git reset --hard HEAD^

当退回到之前版本之后,又想用最新的版本,就必须使用最新版本的commit id.
Git提供了一个 $ git reflog用来记录每一次命令的 commit id
$ git reflog

找到commit id之后再使用 $ git reset --hard [commit id];
例: $ git reset --hard 11db224


工作区和暂存区
    Git和其他版本控制系统有一个不同之处就是有暂存区的概念
    一、工作区(Working Directory)
        就是电脑里能看到的目录,比如learngit文件夹就是一个工作区
    
    二、版本库(Repository)
        工作区有一个隐藏目录,这个不算工作区,而是Git的版本库
        Git的版本库里面存了很多东西,其中最重要的就是stage(或者叫index)的暂存区,还有Git自动创建的第一个分支master,以及执行master的一个指针叫HEAD

        当把文件往Git版本库里添加的时候,是分两个步骤执行的
        1.用git add把文件添加进去,实际上就是把文件修改添加到暂存区
        2.用git commit提交更改,实际上就是把暂存区的所有内容提交到当前分支

        当创建Git版本库时,Git自动创建了唯一一个master分支,所以,现在,git commit就是往master分支上提交更改.
        可以简单的理解为,需要提交的文件修改通通放到暂存区,然后,一次性提交暂存区的所有修改

        使用git add命令实际上就是把要提交的所有修改放到暂存区(Stage),
        然后,执行git commit就可以一次性把暂存区的所有修改提交到分支

        一旦提交后,如果你有没有对工作区做任何修改,那么工作区就是'干净的'






















